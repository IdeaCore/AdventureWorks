<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="cachingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true"/>
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true"/>
  </configSections>


  <appSettings>
    <add key="CacheTimeout" value="00:01:00"/>
    <add key="DefaultObjectBroker" value=""/>
    <add key="ServerInaccessibleTimeout" value="00:02:00"/>
    <add key="SessionInactivityTimeout" value="00:02:00"/>
    <add key="SessionInactivityForceoutReason" value="Session Inactive"/>
    <add key="SynchronizationDelay" value="500"/>
  </appSettings>

  <system.web>
    <compilation debug="true"/>
  </system.web>
  
  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel.MessageLogging" switchValue="All">
        <listeners>
          <add name="wcfListener"/>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add name="wcfListener" type="Ser.Ensercle.Agent.Services.Logging.ProxyTraceListener, EnTsrSvc"/>
    </sharedListeners>
  </system.diagnostics>

  <system.serviceModel>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="false" logMessagesAtServiceLevel="true" logMessagesAtTransportLevel="false"/>
    </diagnostics>
    
    <services>
      <service behaviorConfiguration="ServiceBehavior" name="Ser.Ensercle.Agent.Services.AgentService">
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:9001/services/agent"/>
            <!--
            <add baseAddress="http://localhost:9002/services/agent"/>
            -->
          </baseAddresses>
        </host>
        <!-- Service Endpoints -->
        <!-- Unless fully qualified, address is relative to base address supplied above -->
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="TcpBinding" contract="Ser.Ensercle.Agent.Services.IAgentService">
        </endpoint>

        <endpoint address="callback" binding="netTcpBinding" bindingConfiguration="TcpBinding" contract="Ser.Ensercle.Agent.Services.IAgentService2">
        </endpoint>

        <endpoint address="database" binding="netTcpBinding" bindingConfiguration="TcpBinding" contract="Ser.Ensercle.Agent.Services.IDatabaseService">
        </endpoint>

        <endpoint address="script" binding="netTcpBinding" bindingConfiguration="TcpBinding" contract="Ser.Ensercle.Agent.Services.IScriptService">
        </endpoint>


        <!-- Metadata Endpoints -->
        <!-- The Metadata Exchange endpoint is used by the service to describe itself to clients. -->
        <!-- This endpoint does not use a secure binding and should be secured or removed before deployment -->
        <!--
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        -->
      </service>
      <service behaviorConfiguration="ServiceBehavior" name="Ser.Ensercle.Agent.Services.Config.ConfigurationService">
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:9003/services/agent/config"/>
            <!--
            <add baseAddress="http://localhost:9004/services/agent/config"/>
            -->
          </baseAddresses>
        </host>
        <!-- Service Endpoints -->
        <!-- Unless fully qualified, address is relative to base address supplied above -->
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="TcpBinding" contract="Ser.Ensercle.Agent.Services.Config.IConfigurationService">
        </endpoint>

        <!-- Metadata Endpoints -->
        <!-- The Metadata Exchange endpoint is used by the service to describe itself to clients. -->
        <!-- This endpoint does not use a secure binding and should be secured or removed before deployment -->
        <!--
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        -->
      </service>
      <service behaviorConfiguration="ServiceBehavior" name="Ser.Ensercle.Agent.Services.RecordingService">
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://localhost:9005/services/agent/recording"/>
            <!--
            <add baseAddress="http://localhost:9006/services/agent/recording"/>
            -->
          </baseAddresses>
        </host>
        <!-- Service Endpoints -->
        <!-- Unless fully qualified, address is relative to base address supplied above -->
        <endpoint address="" binding="netTcpBinding" bindingConfiguration="StreamedTCP" contract="Ser.Ensercle.Agent.Services.IRecordingService">
        </endpoint>

        <!-- Metadata Endpoints -->
        <!-- The Metadata Exchange endpoint is used by the service to describe itself to clients. -->
        <!-- This endpoint does not use a secure binding and should be secured or removed before deployment -->
        <!--
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        -->
      </service>
    </services>
    
    <bindings>
      <netTcpBinding>
        <binding name="TcpBinding" portSharingEnabled="false" listenBacklog="1000" maxConnections="10000">
          <readerQuotas maxStringContentLength="65536"/>
          <security mode="Transport">
            <transport clientCredentialType="Windows" />
          </security>
        </binding>
        
        <binding name="StreamedTCP" portSharingEnabled="false" transferMode="Streamed" maxReceivedMessageSize="500000" listenBacklog="1000" maxConnections="1000">
          <security mode="None"/>
        </binding>
      </netTcpBinding>

      <customBinding>
        <binding name="CustomBinding" closeTimeout="00:10:00" openTimeout="00:10:00" receiveTimeout="00:10:00" sendTimeout="00:10:00">
          <transactionFlow transactionProtocol="OleTransactions"/>
          <binaryMessageEncoding maxReadPoolSize="64" maxWritePoolSize="16" maxSessionSize="2048">
            <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="4096" maxNameTableCharCount="16384"/>
          </binaryMessageEncoding>
          <tcpTransport manualAddressing="false" maxBufferPoolSize="524288" maxReceivedMessageSize="2147483647" connectionBufferSize="65536" hostNameComparisonMode="StrongWildcard" channelInitializationTimeout="00:10:00" maxBufferSize="2147483647" maxPendingConnections="10000" maxOutputDelay="00:10:00.2000000" maxPendingAccepts="1000" transferMode="Buffered" listenBacklog="1000" portSharingEnabled="false" teredoEnabled="false">
            <connectionPoolSettings groupName="default" leaseTimeout="00:10:00" idleTimeout="00:10:00" maxOutboundConnectionsPerEndpoint="10000"/>
          </tcpTransport>
        </binding>
      </customBinding>
    </bindings>

    <behaviors>
      <serviceBehaviors>
        <behavior name="ServiceBehavior">
          <!-- To avoid disclosing metadata information, 
               set the value below to false and remove the metadata endpoint above before deployment -->
          <serviceMetadata httpGetEnabled="False"/>
          <!-- To receive exception details in faults for debugging purposes, 
               set the value below to true.  Set to false before deployment 
               to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="True"/>

          <serviceThrottling maxConcurrentCalls="10000" maxConcurrentSessions="10000" maxConcurrentInstances="10000"/>

          <dataContractSerializer maxItemsInObjectGraph="500000"/>
        </behavior>
      </serviceBehaviors>

      <!-- MOVE TO OTHER SERVICE
      <endpointBehaviors>
        <behavior name="AspNetAjaxBehavior">
          <enableWebScript />
        </behavior>
      </endpointBehaviors>
      -->
    </behaviors>
  </system.serviceModel>
  
  <cachingConfiguration defaultCacheManager="System Cache">
    <backingStores>
      <add type="Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="inMemory"/>
    </backingStores>
    
    <cacheManagers>
      <add name="System Cache" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="inMemory"/>
      <add name="Campaign Cache" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="inMemory"/>
    </cacheManagers>
  </cachingConfiguration>

  <loggingConfiguration name="Logging Application Block" tracingEnabled="true" defaultCategory="Default" logWarningsWhenNoCategoriesMatch="false">
    <listeners>
      <add name="Event Log Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" source="EnTsrSvc" formatter="Event Log Formatter" log="" machineName="." traceOutputOptions="None"/>
      <add name="Default Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" fileName="Logs/EnTsrSvc.log" footer="" formatter="Default Log Formatter" header="" rollFileExistsBehavior="Increment" rollSizeKB="20480" maxArchivedFiles="100"/>
      <add name="Message Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" fileName="Logs/EnTsrSvc_Message.log" footer="" formatter="Message Log Formatter" header="" rollFileExistsBehavior="Increment" rollSizeKB="20480" maxArchivedFiles="100"/>
      <add name="MCS Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" fileName="Logs/EnTsrSvc_MCS.log" footer="" formatter="MCS Log Formatter" header="" rollFileExistsBehavior="Increment" rollSizeKB="20480" maxArchivedFiles="100"/>
      <add name="Trace Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" fileName="Logs/EnTsrSvc_Trace.log" footer="" formatter="Trace Log Formatter" header="" rollFileExistsBehavior="Increment" rollSizeKB="20480" maxArchivedFiles="100"/>
    </listeners>
    <formatters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" template="Timestamp: {timestamp(local:o)}{newline}
Message: {message}{newline}
Category: {category}{newline}
Priority: {priority}{newline}
EventId: {eventid}{newline}
Severity: {severity}{newline}
Title:{title}{newline}
Machine: {machine}{newline}
Application Domain: {appDomain}{newline}
Process Id: {processId}{newline}
Process Name: {processName}{newline}
Win32 Thread Id: {win32ThreadId}{newline}
Thread Name: {threadName}{newline}
Extended Properties: {dictionary({key} - {value}{newline}
)}" name="Event Log Formatter"/>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" template="{timestamp(local:o)} {eventid} {severity}  {win32ThreadId} {message} {dictionary([{key} = {value}],)}" name="Default Log Formatter"/>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" template="{timestamp(local:o)} {eventid} {severity}  {win32ThreadId} {message}" name="Message Log Formatter"/>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" template="{timestamp(local:o)} {eventid} {severity}  {win32ThreadId} {message} {dictionary([{key} = {value}],)}" name="MCS Log Formatter"/>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" template="{timestamp(local:o)} {eventid} {severity}  {win32ThreadId} {message}" name="Trace Log Formatter"/>
    </formatters>
    <logFilters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Category Filter"/>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Priority Filter"/>
    </logFilters>
    <categorySources>
      <!-- The supported logging levels (switchValue) are: All, Verbose, Information, Warning, Error, Critical. -->
      <add switchValue="Warning" name="Default">
        <listeners>
          <add name="Default Destination"/>
        </listeners>
      </add>
      <add switchValue="Warning" name="System.ServiceModel">
        <listeners>
          <add name="Message Destination"/>
        </listeners>
      </add>
      <add switchValue="Warning" name="System.ServiceModel.MessageLogging">
        <listeners>
          <add name="Message Destination"/>
        </listeners>
      </add>
      <add switchValue="All" name="Event">
        <listeners>
          <add name="Event Log Destination"/>
        </listeners>
      </add>
      <add switchValue="Off" name="MCS">
        <listeners>
          <add name="MCS Destination"/>
        </listeners>
      </add>
      <!-- Use only switchValue="ActivityTracing" here. -->
      <add switchValue="Off" name="Trace">
        <listeners>
          <add name="Trace Destination"/>
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events"/>
      <notProcessed switchValue="All" name="Unprocessed Category"/>
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="Event Log Destination"/>
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>

<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>
